<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ADN.Helpers</name>
    </assembly>
    <members>
        <member name="T:ADN.Helpers.Data.EnumHelper">
            <summary>
            A static class of extension methods for <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="M:ADN.Helpers.Data.EnumHelper.GetEnumValue(System.Type,System.String,System.Boolean)">
            <summary>
            Get enum value.
            </summary>
            <param name="enumType">Enum type.</param>
            <param name="name">Enum text value.</param>
            <param name="ignoreCase">Ignore case sensitive.</param>
            <returns>Enum value.</returns>
            <exception cref="T:System.ArgumentException">name is not a value in enumType.</exception>
            <example>
            <code lang="csharp">
            enum Foo
            {
                A, B, C, D
            }
            var value = "A";
            var type = typeof(Foo);
            var ignoreCase = true;
            var result = EnumHelper.GetEnumValue(type, value, ignoreCase);
            
            /*
            result is Foo.A
            */
            </code>
            </example>
        </member>
        <member name="T:ADN.Helpers.Utils.Average">
            <summary>
            A static class to calculate averages.
            </summary>
            <example>
            <code lang="csharp">
            double avg = 0;
            int count = 0;
            double value;
            
            // insert first element
            count++;
            value = 1;
            
            avg = Average.RunningAverage(avg, count, value);
            /*
            avg is 1
            */
            
            // insert second element
            count++;
            value = 3;
            
            avg = Average.RunningAverage(avg, count, value);
            /*
            avg is 2
            */
            </code>
            </example>
        </member>
        <member name="M:ADN.Helpers.Utils.Average.RunningAverage(System.Double,System.Int32,System.Double)">
            <summary>
            Calculate average.
            </summary>
            <param name="previousAvg">Previous average.</param>
            <param name="count">Number of elements with the new value.</param>
            <param name="currentValue">New value.</param>
            <returns>Average.</returns>
            <exception cref="T:System.DivideByZeroException">Number of elements is zero.</exception>
        </member>
        <member name="T:ADN.Helpers.Utils.Filter">
            <summary>
            Class to calculate filtered values.
            </summary>
        </member>
        <member name="M:ADN.Helpers.Utils.Filter.#ctor(System.Int32)">
            <summary>
            Class constructor.
            </summary>
            <param name="length">Number of last elements introduced to filter.</param>
            <exception cref="T:System.ArgumentException">Param must be strictly positive.</exception>
        </member>
        <member name="M:ADN.Helpers.Utils.Filter.Clear">
            <summary>
            Remove all values from the filter queue.
            </summary>
        </member>
        <member name="M:ADN.Helpers.Utils.Filter.Add(System.Double)">
            <summary>
            Add new element to filter.
            </summary>
            <param name="value">New value.</param>
            <returns>Filtered value.</returns>
            <example>
            <code lang="csharp">
            var length = 3;
            var filter = new Filter(length);
            double result;
            
            result = filter.Add(1);
            //result is 1
            result = filter.Add(2);
            //result is 1.5
            result = filter.Add(2);
            //result is 1.67
            result = filter.Add(2);
            //result is 2
            result = filter.Add(3);
            //result is 2.33
            result = filter.Add(3);
            //result is 2.67
            result = filter.Add(3);
            //result is 3
            </code>
            </example>
        </member>
        <member name="T:ADN.Helpers.Utils.Range">
            <summary>
            A static class of utilities for ranges.
            </summary>
        </member>
        <member name="M:ADN.Helpers.Utils.Range.Intersection(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@)">
            <summary>
            Calculate the intersection of the given ranges.
            </summary>
            <param name="max1">Maximum value of the first rank.</param>
            <param name="min1">Minimum value of the first rank.</param>
            <param name="max2">Maximum value of the second rank.</param>
            <param name="min2">Minimum value of the second rank.</param>
            <param name="maxR">Maximum value of the intersection range.</param>
            <param name="minR">Minimum value of the intersection range.</param>
            <returns>True if intersection exists, false otherwise.</returns>
            <example>
            <code lang="csharp">
            double max1 = 20;
            double min1 = 15;
            double max2 = 21;
            double min2 = 16;
            double maxRresult;
            double minRresult;
            var result = Range.Intersection(max1, min1, max2, min2, out maxRresult, out minRresult);
            
            /*
            result is true
            maxRresult is 20
            minRresult is 16
            */
            </code>
            </example>
        </member>
    </members>
</doc>
